{"mappings":"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","sources":["src/GamaSource.ts","src/define/GamaSourceState.ts","src/define/GamaSourceConfig.ts","src/gameObject/GameObject.ts","src/math/vector/Vector2.ts","src/input/KeyBoard.ts","src/math/TimeController.ts","src/define/GamaSourceTime.ts","src/UI/view/GameCanvas.ts","src/UI/view/GameWindow.ts","src/rendering/Sprite.ts","src/rendering/material/ShapeSprite.ts","src/rendering/material/forms/SquareSprite.ts"],"sourcesContent":["import GamaSourceState from \"./define/GamaSourceState\"\r\nimport GamaSourceConfig from \"./define/GamaSourceConfig\"\r\nimport GameObject from \"./gameObject/GameObject\"\r\nimport KeyBoard from \"./input/KeyBoard\"\r\nimport TimeController from \"./math/TimeController\"\r\nimport GameCanvas from \"./UI/view/GameCanvas\"\r\nimport GameWindow from \"./UI/view/GameWindow\"\r\nimport GamaSourceTime from \"./define/GamaSourceTime\"\r\nimport Vector2 from \"./math/vector/Vector2\"\r\nimport Sprite from \"./rendering/Sprite\"\r\nimport ShapeSprite from \"./rendering/material/ShapeSprite\"\r\nimport SquareSprite from \"./rendering/material/forms/SquareSprite\"\r\n\r\nclass GamaSource {\r\n\r\n    public static GameObjects = new Array<GameObject>()\r\n    public static ctx:CanvasRenderingContext2D\r\n    public static window:GameWindow\r\n\r\n    private static canvas:HTMLCanvasElement\r\n\r\n    private static state:GamaSourceState\r\n    private time:TimeController\r\n\r\n    public main = () => {}\r\n\r\n    constructor(config?:GamaSourceConfig) {\r\n\r\n        GamaSource.window = new GameWindow()\r\n\r\n        GameCanvas()\r\n        KeyBoard.initialize()\r\n\r\n        this.time = new TimeController(config?.maxFPS ?? 60)\r\n\r\n        GamaSource.state = GamaSourceState.CLOSED\r\n\r\n        GamaSource.canvas = document.querySelector<HTMLCanvasElement>(\"#game\") as HTMLCanvasElement\r\n\r\n        GamaSource.ctx = GamaSource.canvas.getContext(\"2d\") as CanvasRenderingContext2D\r\n\r\n    }\r\n\r\n    private start() {\r\n\r\n         this.main()\r\n\r\n        GamaSource.GameObjects.forEach((g) => g.start())\r\n\r\n    }\r\n\r\n    private update() {\r\n\r\n        GamaSource.GameObjects.forEach((g) => g.update())\r\n\r\n    }\r\n\r\n    private render() {\r\n        \r\n\r\n        GamaSource.ctx.clearRect(0, 0, GamaSource.window.WIDTH, GamaSource.window.HEIGHT)\r\n\r\n        GamaSource.GameObjects.forEach((g) => g.render())\r\n\r\n    }\r\n\r\n    private loop(currentTime:number) {\r\n\r\n        try {\r\n         \r\n            if (GamaSource.state != GamaSourceState.CLOSED && GamaSource.state != GamaSourceState.CRASHED) {\r\n\r\n                requestAnimationFrame((currentTime) => this.loop(currentTime))\r\n\r\n                this.time.DeltaTime = this.time.getDeltaTime(currentTime)\r\n\r\n                if (this.time.DeltaTime >= this.time.getFrameInterval()) return;\r\n         \r\n                if (GamaSource.state != GamaSourceState.STOPPED) {\r\n\r\n                    this.update()\r\n\r\n                }\r\n\r\n                this.render()\r\n\r\n                this.time.updateFrame(currentTime)\r\n    \r\n            }\r\n\r\n        } catch (err) {\r\n            \r\n            console.error(err);\r\n\r\n            GamaSource.state = GamaSourceState.CRASHED\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public run() {\r\n\r\n         this.start()\r\n\r\n        GamaSource.state = GamaSourceState.RUNNING;\r\n\r\n        this.time.updateLastFrame()\r\n\r\n        requestAnimationFrame((currentTime) => this.loop(currentTime))\r\n\r\n    }\r\n\r\n    public static stop() {\r\n\r\n        GamaSource.state = GamaSourceState.STOPPED\r\n\r\n    }\r\n\r\n    public static resume() {\r\n\r\n        GamaSource.state = GamaSourceState.RUNNING\r\n\r\n    }\r\n\r\n    public static exit() {\r\n\r\n        GamaSource.state = GamaSourceState.CLOSED\r\n\r\n    }\r\n    public static falied() {\r\n\r\n        GamaSource.state = GamaSourceState.CRASHED\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default GamaSource\r\n\r\n// exportações para biblioteca\r\nexport {    \r\n    GamaSource, \r\n    GamaSourceState, \r\n    GamaSourceTime, \r\n    GamaSourceConfig,\r\n    GameObject, \r\n    KeyBoard,\r\n    Vector2,\r\n    TimeController,\r\n    Sprite,\r\n    ShapeSprite, \r\n    SquareSprite, \r\n    GameCanvas, \r\n    GameWindow \r\n};","enum GamaSourceState {\r\n\r\n    CLOSED,\r\n    LOADING,\r\n    RUNNING,\r\n    STOPPED,\r\n    CRASHED\r\n\r\n}\r\n\r\nexport default GamaSourceState","export default class GamaSourceConfig {\r\n\r\n    maxFPS?:number\r\n\r\n}","import GamaSource from \"../GamaSource\"\r\nimport Vector2 from \"../math/vector/Vector2\"\r\nimport Sprite from \"../rendering/Sprite\"\r\n\r\nexport default class GameObject {\r\n\r\n    public transform:Vector2 = new Vector2(0, 0)\r\n    protected sprite: Sprite | null = null\r\n    public tag:string = \"not defined\"\r\n\r\n    public static create(obj: typeof GameObject) {\r\n\r\n        GamaSource.GameObjects.push(new obj())\r\n\r\n    }\r\n\r\n    public start() {}\r\n\r\n    public update() {}\r\n\r\n    public render() {\r\n\r\n        if (this.sprite) {\r\n            \r\n            this.sprite.render()\r\n\r\n        }\r\n\r\n    }\r\n\r\n}","export default class Vector2 {\r\n\r\n    public x:number\r\n    public y:number\r\n\r\n    constructor(x:number, y:number) {\r\n\r\n        this.x = x\r\n        this.y = y\r\n\r\n    }\r\n\r\n    public set(x:number, y:number) {\r\n\r\n        this.x = x\r\n        this.y = y\r\n\r\n    }\r\n\r\n    public add(other: Vector2): Vector2 {\r\n\r\n        return new Vector2(this.x + other.x, this.y + other.y);\r\n\r\n    }\r\n    \r\n    public subtract(other: Vector2): Vector2 {\r\n\r\n        return new Vector2(this.x - other.x, this.y - other.y);\r\n\r\n    }\r\n\r\n    public multiply(scalar: number): Vector2 {\r\n\r\n        return new Vector2(this.x * scalar, this.y * scalar);\r\n\r\n    }\r\n\r\n    public magnitude(): number {\r\n\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n\r\n    }\r\n\r\n    public normalize(): Vector2 {\r\n\r\n        const mag = this.magnitude();\r\n\r\n        if (mag === 0) return new Vector2(0, 0);\r\n\r\n        return new Vector2(this.x / mag, this.y / mag);\r\n\r\n    }\r\n\r\n}","export default abstract class KeyBoard {\r\n\r\n    private static events = new Array<(keyboard:KeyboardEvent) => void>\r\n    private static mapper = new Map<string, boolean>()\r\n\r\n    public static initialize() {\r\n\r\n        document.addEventListener(\"keydown\", (keyboard) => {\r\n\r\n            KeyBoard.mapper.set(keyboard.key, true)\r\n\r\n            this.events.forEach(e => {\r\n\r\n                e(keyboard)\r\n\r\n            })\r\n\r\n        })\r\n        document.addEventListener(\"keyup\", (e) => KeyBoard.mapper.set(e.key, false))\r\n\r\n    }\r\n\r\n    public static getKeyDown(key:string) {\r\n\r\n        return KeyBoard.mapper.get(key)\r\n\r\n    }\r\n\r\n}","import Time from \"../define/GamaSourceTime\"\r\n\r\nexport default class TimeController {\r\n\r\n    public DeltaTime:number\r\n    public FPS:number\r\n    \r\n    private frameInterval:number\r\n    private lastFrameTime:number\r\n    private frameCount:number\r\n\r\n    constructor(maxFPS:number) {\r\n\r\n        this.FPS = 0\r\n        this.DeltaTime = 0\r\n        this.lastFrameTime = performance.now()\r\n        this.frameCount = 0\r\n        this.frameInterval = Time.SECOND / maxFPS\r\n\r\n    }\r\n\r\n    public updateFrame(currentTime:number) {\r\n\r\n        this.frameCount++;\r\n        if (currentTime > this.lastFrameTime + Time.SECOND) {\r\n            this.FPS = this.frameCount;\r\n            this.frameCount = 0;\r\n            this.lastFrameTime = currentTime;\r\n        }\r\n\r\n    }\r\n\r\n    public updateLastFrame() {\r\n\r\n        this.lastFrameTime = performance.now()\r\n\r\n    }\r\n\r\n    public setMaxFPS(maxFPS:number) {\r\n\r\n        this.frameInterval = Time.SECOND / maxFPS\r\n\r\n    }\r\n\r\n    public getDeltaTime(currentTime?:number) {\r\n\r\n        if (currentTime) {\r\n         \r\n            return (currentTime - this.lastFrameTime) / Time.SECOND\r\n\r\n        }\r\n\r\n        return this.DeltaTime\r\n\r\n    }\r\n\r\n    public getFrameInterval() {\r\n\r\n        return this.frameInterval\r\n\r\n    }\r\n\r\n}","enum GamaSourceTime {\r\n\r\n    SECOND = 1000,\r\n\r\n}\r\n\r\nexport default GamaSourceTime","import GamaSource from \"../../GamaSource\"\r\n\r\nexport default () => {\r\n\r\n    document.body.style.boxSizing = \"boxSizing\"\r\n    document.body.style.margin = \"0\"\r\n\r\n    const game = document.createElement(\"canvas\")\r\n    game.id = \"game\"\r\n    game.style.position = \"absolute\"\r\n    game.style.top = \"0\"\r\n    game.style.bottom = \"0\"\r\n    game.style.left = \"0\"\r\n    game.style.right = \"0\"\r\n    game.width = GamaSource.window.WIDTH\r\n    game.height = GamaSource.window.HEIGHT\r\n\r\n    GamaSource.window.addEvent(() => {\r\n\r\n        game.width = GamaSource.window.WIDTH\r\n        game.height = GamaSource.window.HEIGHT\r\n\r\n    })\r\n\r\n    document.body.appendChild(game)\r\n\r\n}","export default class GameWindow {\r\n\r\n    public HEIGHT:number\r\n    public WIDTH:number\r\n\r\n    private static EVENTS = new Array<() => void>()\r\n\r\n    constructor() {\r\n\r\n        this.WIDTH = window.innerWidth\r\n        this.HEIGHT = window.innerHeight\r\n\r\n    }\r\n\r\n    public size = {\r\n\r\n        getWidth: (percentage:number) => this.WIDTH * (percentage / 100),\r\n        getHeight: (percentage:number) => this.HEIGHT * (percentage / 100)\r\n\r\n    }\r\n\r\n    public addEvent(ev:() => void) {\r\n\r\n        GameWindow.EVENTS.push(ev)\r\n\r\n        window.addEventListener(\"resize\", () => {\r\n\r\n            this.WIDTH = window.innerWidth\r\n            this.HEIGHT = window.innerHeight\r\n\r\n            GameWindow.EVENTS.forEach(e => {\r\n\r\n                e()\r\n\r\n            })\r\n\r\n        })\r\n\r\n    }\r\n\r\n    public getScale() {\r\n\r\n        return this.WIDTH / this.HEIGHT\r\n\r\n    }\r\n    \r\n}","import GameObject from \"../gameObject/GameObject\";\r\nimport Vector2 from \"../math/vector/Vector2\";\r\n\r\nexport default abstract class Sprite {\r\n\r\n    public reference: Vector2 | GameObject = new Vector2(0,0)\r\n    public width = 0;\r\n    public height = 0;\r\n\r\n    public abstract render():void\r\n\r\n}","import GameObject from \"../../gameObject/GameObject\"\r\nimport Vector2 from \"../../math/vector/Vector2\"\r\nimport Sprite from \"../Sprite\"\r\n\r\nexport default abstract class ShapeSprite extends Sprite {\r\n\r\n    public color:string\r\n\r\n    constructor(reference:Vector2 | GameObject, width:number, height:number, color:string) {\r\n\r\n        super()\r\n        this.reference = reference\r\n        this.width = width\r\n        this.height = height\r\n        this.color = color\r\n\r\n    }\r\n}","import GamaSource from \"../../../GamaSource\";\r\nimport GameObject from \"../../../gameObject/GameObject\";\r\nimport Vector2 from \"../../../math/vector/Vector2\";\r\nimport ShapeSprite from \"../ShapeSprite\";\r\n\r\nexport default class SquareSprite extends ShapeSprite {\r\n\r\n    constructor(reference:Vector2 | GameObject, width:number, height:number, color:string) {\r\n\r\n        super(reference, width, height, color)\r\n\r\n    }\r\n\r\n    public render() {\r\n\r\n        if (this.reference instanceof GameObject) {\r\n        \r\n            GamaSource.ctx.fillStyle = this.color\r\n            GamaSource.ctx.fillRect(this.reference.transform.x, this.reference.transform.y, this.width, this.height)\r\n\r\n            return \r\n        }\r\n\r\n        GamaSource.ctx.fillStyle = this.color\r\n        GamaSource.ctx.fillRect(this.reference.x, this.reference.y, this.width, this.height)\r\n\r\n    }\r\n\r\n}"],"names":[],"version":3,"file":"GamaSource.js.map"}