{"mappings":"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","sources":["src/GamaSource.ts","src/define/GamaSoruceState.ts","src/input/KeyBoard.ts","src/math/TimeController.ts","src/define/Time.ts","src/UI/view/GameCanvas.ts","src/UI/view/GameWindow.ts"],"sourcesContent":["import GamaSourceState from \"./define/GamaSoruceState\"\r\nimport GamaSourceConfig from \"./define/GamaSourceTime\"\r\nimport GameOject from \"./gameObject/GameObject\"\r\nimport KeyBoard from \"./input/KeyBoard\"\r\nimport TimeController from \"./math/TimeController\"\r\nimport GameCanvas from \"./UI/view/GameCanvas\"\r\nimport GameWindow from \"./UI/view/GameWindow\"\r\n\r\nexport default class GamaSource {\r\n\r\n    public static GameObjects = new Array<GameOject>()\r\n    public static ctx:CanvasRenderingContext2D\r\n    public static window:GameWindow\r\n\r\n    private static canvas:HTMLCanvasElement\r\n\r\n    private static state:GamaSourceState\r\n    private time:TimeController\r\n\r\n    public main = () => {}\r\n\r\n    constructor(config?:GamaSourceConfig) {\r\n\r\n        GamaSource.window = new GameWindow()\r\n\r\n        GameCanvas()\r\n        KeyBoard.initialize()\r\n\r\n        this.time = new TimeController(config?.maxFPS ?? 60)\r\n\r\n        GamaSource.state = GamaSourceState.CLOSED\r\n\r\n        GamaSource.canvas = document.querySelector<HTMLCanvasElement>(\"#game\") as HTMLCanvasElement\r\n\r\n        GamaSource.ctx = GamaSource.canvas.getContext(\"2d\") as CanvasRenderingContext2D\r\n\r\n    }\r\n\r\n    private start() {\r\n\r\n         this.main()\r\n\r\n        GamaSource.GameObjects.forEach((g) => g.start())\r\n\r\n    }\r\n\r\n    private update() {\r\n\r\n        GamaSource.GameObjects.forEach((g) => g.update())\r\n\r\n    }\r\n\r\n    private render() {\r\n        \r\n\r\n        GamaSource.ctx.clearRect(0, 0, GamaSource.window.WIDTH, GamaSource.window.HEIGHT)\r\n\r\n        GamaSource.GameObjects.forEach((g) => g.render())\r\n\r\n    }\r\n\r\n    private loop(currentTime:number) {\r\n\r\n        try {\r\n         \r\n            if (GamaSource.state != GamaSourceState.CLOSED && GamaSource.state != GamaSourceState.CRASHED) {\r\n\r\n                requestAnimationFrame((currentTime) => this.loop(currentTime))\r\n\r\n                this.time.DeltaTime = this.time.getDeltaTime(currentTime)\r\n\r\n                if (this.time.DeltaTime >= this.time.getFrameInterval()) return;\r\n         \r\n                if (GamaSource.state != GamaSourceState.STOPPED) {\r\n\r\n                    this.update()\r\n\r\n                }\r\n\r\n                this.render()\r\n\r\n                this.time.updateFrame(currentTime)\r\n    \r\n            }\r\n\r\n        } catch (err) {\r\n            \r\n            console.error(err);\r\n\r\n            GamaSource.state = GamaSourceState.CRASHED\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public run() {\r\n\r\n         this.start()\r\n\r\n        GamaSource.state = GamaSourceState.RUNNING;\r\n\r\n        this.time.updateLastFrame()\r\n\r\n        requestAnimationFrame((currentTime) => this.loop(currentTime))\r\n\r\n    }\r\n\r\n    public static stop() {\r\n\r\n        GamaSource.state = GamaSourceState.STOPPED\r\n\r\n    }\r\n\r\n    public static resume() {\r\n\r\n        GamaSource.state = GamaSourceState.RUNNING\r\n\r\n    }\r\n\r\n    public static exit() {\r\n\r\n        GamaSource.state = GamaSourceState.CLOSED\r\n\r\n    }\r\n    public static falied() {\r\n\r\n        GamaSource.state = GamaSourceState.CRASHED\r\n\r\n    }\r\n\r\n}","enum GamaSourceState {\r\n\r\n    CLOSED,\r\n    LOADING,\r\n    RUNNING,\r\n    STOPPED,\r\n    CRASHED\r\n\r\n}\r\n\r\nexport default GamaSourceState","export default abstract class KeyBoard {\r\n\r\n    private static events = new Array<(keyboard:KeyboardEvent) => void>\r\n    private static mapper = new Map<string, boolean>()\r\n\r\n    public static initialize() {\r\n\r\n        document.addEventListener(\"keydown\", (keyboard) => {\r\n\r\n            KeyBoard.mapper.set(keyboard.key, true)\r\n\r\n            this.events.forEach(e => {\r\n\r\n                e(keyboard)\r\n\r\n            })\r\n\r\n        })\r\n        document.addEventListener(\"keyup\", (e) => KeyBoard.mapper.set(e.key, false))\r\n\r\n    }\r\n\r\n    public static getKeyDown(key:string) {\r\n\r\n        return KeyBoard.mapper.get(key)\r\n\r\n    }\r\n\r\n}","import Time from \"../define/Time\"\r\n\r\nexport default class TimeController {\r\n\r\n    public DeltaTime:number\r\n    public FPS:number\r\n    \r\n    private frameInterval:number\r\n    private lastFrameTime:number\r\n    private frameCount:number\r\n\r\n    constructor(maxFPS:number) {\r\n\r\n        this.DeltaTime = 0\r\n        this.lastFrameTime = performance.now()\r\n        this.frameCount = 0\r\n        this.setMaxFPS(maxFPS)\r\n\r\n    }\r\n\r\n    public updateFrame(currentTime:number) {\r\n\r\n        this.frameCount++;\r\n        if (currentTime > this.lastFrameTime + Time.SECOND) {\r\n            this.FPS = this.frameCount;\r\n            this.frameCount = 0;\r\n            this.lastFrameTime = currentTime;\r\n        }\r\n\r\n    }\r\n\r\n    public updateLastFrame() {\r\n\r\n        this.lastFrameTime = performance.now()\r\n\r\n    }\r\n\r\n    public setMaxFPS(maxFPS:number) {\r\n\r\n        this.frameInterval = Time.SECOND / maxFPS\r\n\r\n    }\r\n\r\n    public getDeltaTime(currentTime?:number) {\r\n\r\n        if (currentTime) {\r\n         \r\n            return (currentTime - this.lastFrameTime) / Time.SECOND\r\n\r\n        }\r\n\r\n        return this.DeltaTime\r\n\r\n    }\r\n\r\n    public getFrameInterval() {\r\n\r\n        return this.frameInterval\r\n\r\n    }\r\n\r\n}","enum Time {\r\n\r\n    SECOND = 1000,\r\n\r\n}\r\n\r\nexport default Time","import GamaSource from \"../../GamaSource\"\r\n\r\nexport default () => {\r\n\r\n    document.body.style.boxSizing = \"boxSizing\"\r\n    document.body.style.margin = \"0\"\r\n\r\n    const game = document.createElement(\"canvas\")\r\n    game.id = \"game\"\r\n    game.style.position = \"absolute\"\r\n    game.style.top = \"0\"\r\n    game.style.bottom = \"0\"\r\n    game.style.left = \"0\"\r\n    game.style.right = \"0\"\r\n    game.width = GamaSource.window.WIDTH\r\n    game.height = GamaSource.window.HEIGHT\r\n\r\n    GamaSource.window.addEvent(() => {\r\n\r\n        game.width = GamaSource.window.WIDTH\r\n        game.height = GamaSource.window.HEIGHT\r\n\r\n    })\r\n\r\n    document.body.appendChild(game)\r\n\r\n}","export default class GameWindow {\r\n\r\n    public HEIGHT:number\r\n    public WIDTH:number\r\n\r\n    private static EVENTS = new Array<() => void>()\r\n\r\n    constructor() {\r\n\r\n        this.WIDTH = window.innerWidth\r\n        this.HEIGHT = window.innerHeight\r\n\r\n    }\r\n\r\n    public size = {\r\n\r\n        getWidth: (percentage:number) => this.WIDTH * (percentage / 100),\r\n        getHeight: (percentage:number) => this.HEIGHT * (percentage / 100)\r\n\r\n    }\r\n\r\n    public addEvent(ev:() => void) {\r\n\r\n        GameWindow.EVENTS.push(ev)\r\n\r\n        window.addEventListener(\"resize\", () => {\r\n\r\n            this.WIDTH = window.innerWidth\r\n            this.HEIGHT = window.innerHeight\r\n\r\n            GameWindow.EVENTS.forEach(e => {\r\n\r\n                e()\r\n\r\n            })\r\n\r\n        })\r\n\r\n    }\r\n\r\n    public getScale() {\r\n\r\n        return this.WIDTH / this.HEIGHT\r\n\r\n    }\r\n    \r\n}"],"names":[],"version":3,"file":"GamaSource.js.map","sourceRoot":"../../"}