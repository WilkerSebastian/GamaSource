{"mappings":"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","sources":["src/src/define/GamaSourceState.ts","src/src/define/GamaSourceConfig.ts","src/src/math/vector/Vector2.ts","src/src/rendering/Sprite.ts","src/src/gameObject/GameObject.ts","src/src/input/KeyBoard.ts","src/src/define/TimeGame.ts","src/src/math/time/TimeController.ts","src/src/UI/view/GameCanvas.ts","src/src/UI/view/GameWindow.ts","src/src/rendering/material/ShapeSprite.ts","src/src/rendering/material/forms/SquareSprite.ts","src/src/asset/image/GameImage.ts","src/src/rendering/spriteAsset/static/StaticSprite.ts","src/src/math/GameMath.ts","src/src/asset/audio/GameAudio.ts","src/src/UI/view/img64/atomic.ts","src/src/UI/view/img64/source.ts","src/src/UI/view/Loader.ts","src/src/GamaSource.ts","src/GamaSource.ts"],"sourcesContent":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"import GamaSourceState from \"./define/GamaSourceState\"\r\nimport GamaSourceConfig from \"./define/GamaSourceConfig\"\r\nimport GameObject from \"./gameObject/GameObject\"\r\nimport KeyBoard from \"./input/KeyBoard\"\r\nimport TimeController from \"./math/time/TimeController\"\r\nimport GameCanvas from \"./UI/view/GameCanvas\"\r\nimport GameWindow from \"./UI/view/GameWindow\"\r\nimport TimeGame from \"./define/TimeGame\"\r\nimport Vector2 from \"./math/vector/Vector2\"\r\nimport Sprite from \"./rendering/Sprite\"\r\nimport ShapeSprite from \"./rendering/material/ShapeSprite\"\r\nimport SquareSprite from \"./rendering/material/forms/SquareSprite\"\r\nimport StaticSprite from \"./rendering/spriteAsset/static/StaticSprite\"\r\nimport GameMath from \"./math/GameMath\"\r\nimport GameAudio from \"./asset/audio/GameAudio\"\r\nimport GameImage from \"./asset/image/GameImage\"\r\nimport Loader from \"./UI/view/Loader\"\r\n\r\nclass GamaSource {\r\n\r\n    public static LOAD:number = 0\r\n    public static ASSETS = new Map<string , GameAudio | GameImage>\r\n    public static GameObjects = new Array<GameObject>()\r\n    public static ctx:CanvasRenderingContext2D\r\n    public static window:GameWindow\r\n\r\n    private static canvas:HTMLCanvasElement\r\n\r\n    private static state:GamaSourceState\r\n    private time:TimeController\r\n\r\n    private background:Sprite\r\n    public main = () => {}\r\n\r\n    constructor(config?:GamaSourceConfig) {\r\n\r\n        GamaSource.window = new GameWindow()\r\n\r\n        const source = config?.background ?? \"#787878\"\r\n\r\n        if (!Number.isNaN(parseInt(source.split(\"#\").join(\"\"), 16))) {\r\n\r\n            this.background = new SquareSprite(new Vector2(0,0), GamaSource.window.WIDTH, GamaSource.window.HEIGHT, source)\r\n            \r\n        } else {\r\n\r\n            const name = GamaSource.loader(source)[0]\r\n\r\n            this.background = new StaticSprite(name, new Vector2(0,0), GamaSource.window.WIDTH, GamaSource.window.HEIGHT)\r\n\r\n    \r\n        }\r\n\r\n        GamaSource.window.addEvent(() => {\r\n\r\n            this.background.width = GamaSource.window.WIDTH\r\n            this.background.height = GamaSource.window.HEIGHT\r\n\r\n        })\r\n\r\n        GameCanvas()\r\n        KeyBoard.initialize()\r\n\r\n        this.time = new TimeController(config?.maxFPS ?? 60)\r\n\r\n        GamaSource.state = GamaSourceState.CLOSED\r\n\r\n        GamaSource.canvas = document.querySelector<HTMLCanvasElement>(\"#game\") as HTMLCanvasElement\r\n\r\n        GamaSource.ctx = GamaSource.canvas.getContext(\"2d\") as CanvasRenderingContext2D\r\n\r\n    }\r\n\r\n    // métodos de incialização\r\n\r\n    private start() {\r\n\r\n        this.main()\r\n\r\n        Loader()\r\n\r\n        GamaSource.GameObjects.forEach((g) => g.start())\r\n\r\n    }\r\n\r\n    private update() {\r\n\r\n        GamaSource.GameObjects.forEach((g) => g.gameUpdate())\r\n\r\n    }\r\n\r\n    private render() {\r\n\r\n        GamaSource.ctx.clearRect(0, 0, GamaSource.window.WIDTH, GamaSource.window.HEIGHT)\r\n\r\n        this.background.render()\r\n\r\n        GamaSource.GameObjects.forEach((g) => g.render())\r\n\r\n    }\r\n\r\n    private loop(currentTime:number) {\r\n\r\n        try {\r\n         \r\n            if (GamaSource.state != GamaSourceState.CLOSED && GamaSource.state != GamaSourceState.CRASHED) {\r\n\r\n                requestAnimationFrame((currentTime) => this.loop(currentTime))\r\n\r\n                this.time.DeltaTime = this.time.getDeltaTime(currentTime)\r\n\r\n                if (this.time.DeltaTime >= this.time.getFrameInterval()) return;\r\n         \r\n                if (GamaSource.state != GamaSourceState.STOPPED) {\r\n\r\n                    this.update()\r\n\r\n                }\r\n\r\n                this.render()\r\n\r\n                this.time.updateFrame(currentTime)\r\n    \r\n            }\r\n\r\n        } catch (err) {\r\n            \r\n            console.error(err);\r\n\r\n            GamaSource.state = GamaSourceState.CRASHED\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public run() {\r\n\r\n        this.start()\r\n\r\n        GamaSource.state = GamaSourceState.RUNNING;\r\n\r\n        this.time.updateLastFrame()\r\n\r\n        requestAnimationFrame((currentTime) => this.loop(currentTime))\r\n\r\n    }\r\n\r\n    public static stop() {\r\n\r\n        GamaSource.state = GamaSourceState.STOPPED\r\n\r\n    }\r\n\r\n    public static resume() {\r\n\r\n        GamaSource.state = GamaSourceState.RUNNING\r\n\r\n    }\r\n\r\n    public static exit() {\r\n\r\n        GamaSource.state = GamaSourceState.CLOSED\r\n\r\n    }\r\n    public static falied() {\r\n\r\n        GamaSource.state = GamaSourceState.CRASHED\r\n\r\n    }\r\n\r\n    // métodos de controle\r\n    public static loader(...assets:string[]) {\r\n\r\n        let names:string[] = []\r\n\r\n        assets.forEach(a => {\r\n\r\n            const name = a.split(\"/\")\r\n\r\n            names.push(name[name.length - 1])\r\n\r\n            if (!this.ASSETS.get(name[name.length - 1])) {\r\n             \r\n                if (/\\.(mp3|wav|flac|ogg)$/i.test(a)) {\r\n\r\n                    new GameAudio(a)\r\n                    \r\n                } else if(/\\.(jpg|jpeg|png|gif|bmp|svg)$/i.test(a)) {\r\n    \r\n                    new GameImage(a)\r\n                    \r\n                }\r\n\r\n            }\r\n\r\n        })\r\n\r\n        return names\r\n\r\n    } \r\n\r\n}\r\n\r\nexport default GamaSource\r\n\r\n// exportações para biblioteca\r\nexport {    \r\n    GamaSource, \r\n    GamaSourceState, \r\n    TimeGame, \r\n    GamaSourceConfig,\r\n    GameObject, \r\n    KeyBoard,\r\n    Vector2,\r\n    TimeController,\r\n    Sprite,\r\n    ShapeSprite, \r\n    SquareSprite, \r\n    StaticSprite,\r\n    GameCanvas, \r\n    GameWindow,\r\n    GameMath\r\n};"],"names":[],"version":3,"file":"GamaSource.d.ts.map"}