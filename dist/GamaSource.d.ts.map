{"mappings":"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","sources":["src/src/define/GamaSourceState.ts","src/src/define/GamaSourceConfig.ts","src/src/math/vector/Vector2.ts","src/src/math/collision/BoxCollider2D.ts","src/src/gameObject/GameObject.ts","src/src/input/KeyBoard.ts","src/src/define/TimeGame.ts","src/src/math/time/TimeController.ts","src/src/UI/view/GameCanvas.ts","src/src/UI/view/GameWindow.ts","src/src/rendering/spriteAsset/SizeSprite.ts","src/src/rendering/Sprite.ts","src/src/rendering/material/ShapeSprite.ts","src/src/rendering/material/forms/SquareSprite.ts","src/src/asset/image/GameImage.ts","src/src/rendering/spriteAsset/static/StaticSprite.ts","src/src/math/GameMath.ts","src/src/asset/audio/GameAudio.ts","src/src/UI/view/img64/atomic.ts","src/src/UI/view/img64/source.ts","src/src/UI/view/Loader.ts","src/src/input/Mouse.ts","src/src/define/ratio.ts","src/src/UI/FrameComponent.ts","src/src/UI/components/FramePanel.ts","src/src/UI/components/FrameText.ts","src/src/asset/data/JsonAnimation.ts","src/src/rendering/spriteAsset/dynamic/Slice.ts","src/src/rendering/spriteAsset/dynamic/SpriteSheet.ts","src/src/rendering/spriteAsset/animation/AnimationController.ts","src/src/math/collision/RigidBody2D.ts","src/src/gameObject/Camera.ts","src/src/GamaSource.ts","src/GamaSource.ts"],"sourcesContent":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"import GamaSourceState from \"./define/GamaSourceState\"\r\nimport GamaSourceConfig from \"./define/GamaSourceConfig\"\r\nimport GameObject from \"./gameObject/GameObject\"\r\nimport KeyBoard from \"./input/KeyBoard\"\r\nimport TimeController from \"./math/time/TimeController\"\r\nimport GameCanvas from \"./UI/view/GameCanvas\"\r\nimport GameWindow from \"./UI/view/GameWindow\"\r\nimport TimeGame from \"./define/TimeGame\"\r\nimport Vector2 from \"./math/vector/Vector2\"\r\nimport Sprite from \"./rendering/Sprite\"\r\nimport ShapeSprite from \"./rendering/material/ShapeSprite\"\r\nimport SquareSprite from \"./rendering/material/forms/SquareSprite\"\r\nimport StaticSprite from \"./rendering/spriteAsset/static/StaticSprite\"\r\nimport GameMath from \"./math/GameMath\"\r\nimport GameAudio from \"./asset/audio/GameAudio\"\r\nimport GameImage from \"./asset/image/GameImage\"\r\nimport Loader from \"./UI/view/Loader\"\r\nimport Mouse from \"./input/Mouse\"\r\nimport FrameComponent from \"./UI/FrameComponent\"\r\nimport FramePanel from \"./UI/components/FramePanel\"\r\nimport FrameText from \"./UI/components/FrameText\"\r\nimport AnimationController from \"./rendering/spriteAsset/animation/AnimationController\"\r\nimport JsonAnimation from \"./asset/data/JsonAnimation\"\r\nimport SpriteSheet from \"./rendering/spriteAsset/dynamic/SpriteSheet\"\r\nimport RigidBody2D from \"./math/collision/RigidBody2D\"\r\nimport BoxCollider2D from \"./math/collision/BoxCollider2D\"\r\nimport Camera from \"./gameObject/Camera\"\r\n\r\nclass GamaSource {\r\n\r\n    public static LOAD:number = 0\r\n    public static ASSETS = new Map<string , GameAudio | GameImage>\r\n    public static GameObjects = new Array<GameObject>()\r\n    public static ctx:CanvasRenderingContext2D\r\n    public static window:GameWindow\r\n    public static UI:FrameComponent\r\n    public static globalEnv = new Map<string, any>()\r\n    public static ReferenceGame: GamaSource\r\n    public static Camera = new Camera()\r\n\r\n    private static canvas:HTMLCanvasElement\r\n\r\n    private static state:GamaSourceState\r\n    private time:TimeController\r\n\r\n    private background:Sprite\r\n    private scenes = new Map<string, () => void>()\r\n\r\n    constructor(config?:GamaSourceConfig) {\r\n\r\n        GamaSource.window = new GameWindow()\r\n\r\n        const source = config?.background ?? \"#F2F2F2\"\r\n\r\n        if (!Number.isNaN(parseInt(source.split(\"#\").join(\"\"), 16))) {\r\n\r\n            this.background = new SquareSprite(new Vector2(0,0), GamaSource.window.WIDTH, GamaSource.window.HEIGHT, source)\r\n            \r\n        } else {\r\n\r\n            const name = GamaSource.loader(source)[0]\r\n\r\n            this.background = new StaticSprite(name, new Vector2(0,0), {width:GamaSource.window.WIDTH, height:GamaSource.window.HEIGHT})\r\n    \r\n        }\r\n\r\n        GamaSource.UI = new FrameComponent({\r\n            x:0,\r\n            y:0,\r\n            width:GamaSource.window.WIDTH,\r\n            height:GamaSource.window.HEIGHT,\r\n            visible:true\r\n        })\r\n\r\n        GamaSource.window.addEvent(() => {\r\n\r\n            GamaSource.UI.setSize(GamaSource.window.WIDTH, GamaSource.window.HEIGHT)\r\n\r\n            this.background.width = GamaSource.window.WIDTH\r\n            this.background.height = GamaSource.window.HEIGHT\r\n\r\n        })\r\n\r\n        GameCanvas()\r\n        Mouse.initialize()\r\n        KeyBoard.initialize()\r\n\r\n        this.time = new TimeController(config?.maxFPS ?? 60)\r\n\r\n        GamaSource.state = GamaSourceState.CLOSED\r\n\r\n        GamaSource.canvas = document.querySelector<HTMLCanvasElement>(\"#game\") as HTMLCanvasElement\r\n\r\n        GamaSource.ctx = GamaSource.canvas.getContext(\"2d\") as CanvasRenderingContext2D\r\n        GamaSource.ctx.imageSmoothingEnabled = config?.imageSmoothingEnabled ?? false\r\n\r\n    }\r\n\r\n    // métodos de incialização\r\n\r\n    private start() {\r\n\r\n        GamaSource.ReferenceGame = this\r\n\r\n        const main = this.scenes.get(\"main\")\r\n\r\n        if (main) {\r\n\r\n            main()\r\n            \r\n        } else {\r\n\r\n            console.error(\"Error the main scene not found!\");\r\n            GamaSource.falied()\r\n            return\r\n\r\n        }\r\n\r\n        Loader()\r\n\r\n        GamaSource.GameObjects.forEach((g) => g.start())\r\n\r\n    }\r\n\r\n    private update() {\r\n\r\n        GamaSource.globalEnv.set(\"deltaTime\", this.time.getDeltaTime())\r\n        GamaSource.globalEnv.set(\"latency\", this.time.getFrameInterval())\r\n\r\n        GamaSource.GameObjects.forEach((g) => g.gameUpdate())\r\n\r\n        GamaSource.UI.FrameUpdate()\r\n\r\n    }\r\n\r\n    private render() {\r\n\r\n        GamaSource.ctx.clearRect(0, 0, GamaSource.window.WIDTH, GamaSource.window.HEIGHT)\r\n\r\n        this.background.render()\r\n\r\n        GamaSource.ctx.save()\r\n        \r\n        GamaSource.Camera.followObject()\r\n\r\n        GamaSource.GameObjects.forEach((g) => {\r\n            \r\n            g.render()\r\n            \r\n        })\r\n        \r\n        GamaSource.ctx.restore()\r\n\r\n        GamaSource.UI.FrameRender()\r\n\r\n    }\r\n\r\n    private loop(currentTime:number) {\r\n\r\n        try {\r\n         \r\n            if (GamaSource.state != GamaSourceState.CLOSED && GamaSource.state != GamaSourceState.CRASHED) {\r\n\r\n                requestAnimationFrame((currentTime) => this.loop(currentTime));\r\n\r\n                this.time.DeltaTime = this.time.getDeltaTime(currentTime)\r\n\r\n                if (this.time.DeltaTime >= this.time.getFrameInterval()) return;\r\n         \r\n                if (GamaSource.state != GamaSourceState.STOPPED) {\r\n\r\n                    this.update()\r\n\r\n                }\r\n\r\n                this.render()\r\n\r\n                this.time.updateFrame(currentTime)\r\n    \r\n            }\r\n\r\n        } catch (err) {\r\n            \r\n            console.error(err);\r\n\r\n            GamaSource.state = GamaSourceState.CRASHED\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public run() {\r\n\r\n        this.start()\r\n\r\n        GamaSource.state = GamaSourceState.RUNNING;\r\n\r\n        this.time.updateLastFrame()\r\n\r\n        requestAnimationFrame((currentTime) => this.loop(currentTime))\r\n\r\n    }\r\n\r\n    public static stop() {\r\n\r\n        GamaSource.state = GamaSourceState.STOPPED\r\n\r\n    }\r\n\r\n    public static resume() {\r\n\r\n        GamaSource.state = GamaSourceState.RUNNING\r\n\r\n    }\r\n\r\n    public static exit() {\r\n\r\n        GamaSource.state = GamaSourceState.CLOSED\r\n\r\n    }\r\n    public static falied() {\r\n\r\n        GamaSource.state = GamaSourceState.CRASHED\r\n\r\n    }\r\n\r\n    // métodos de controle\r\n\r\n    public static loader(...assets:string[]) {\r\n\r\n        let names:string[] = []\r\n\r\n        assets.forEach(a => {\r\n\r\n            const name = a.split(\"/\")\r\n\r\n            names.push(name[name.length - 1])\r\n\r\n            if (!this.ASSETS.get(name[name.length - 1])) {\r\n             \r\n                if (/\\.(mp3|wav|flac|ogg)$/i.test(a)) {\r\n\r\n                    new GameAudio(a)\r\n                    \r\n                } else if(/\\.(jpg|jpeg|png|gif|bmp|svg)$/i.test(a)) {\r\n    \r\n                    new GameImage(a)\r\n                    \r\n                }\r\n\r\n            }\r\n\r\n        })\r\n\r\n        return names\r\n\r\n    }\r\n\r\n    public addScene(scene:string, performer:() => void) {\r\n\r\n        if(!this.scenes.get(scene)) {\r\n         \r\n            this.scenes.set(scene, performer)\r\n            return\r\n\r\n        }\r\n\r\n        console.error(\"Scene overwriting is not allowed!\");\r\n        GamaSource.falied()\r\n\r\n    }\r\n\r\n    public changeScene(scene:string) {\r\n\r\n        const sc = this.scenes.get(scene)\r\n\r\n        if(sc) {\r\n\r\n            GamaSource.UI.setChildrens([])\r\n            GamaSource.GameObjects = []\r\n\r\n            sc()\r\n\r\n            GamaSource.GameObjects.forEach((g) => g.start())            \r\n\r\n            return\r\n\r\n        }\r\n\r\n        console.warn(`The scene ${scene} was not found`);\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default GamaSource\r\n\r\n// exportações para biblioteca\r\nexport {    \r\n    GamaSource, \r\n    GamaSourceState, \r\n    TimeGame, \r\n    GamaSourceConfig,\r\n    GameObject, \r\n    KeyBoard,\r\n    Mouse,\r\n    Vector2,\r\n    TimeController,\r\n    Sprite,\r\n    ShapeSprite, \r\n    SquareSprite, \r\n    StaticSprite,\r\n    RigidBody2D,\r\n    BoxCollider2D,\r\n    SpriteSheet,\r\n    AnimationController,\r\n    JsonAnimation,\r\n    GameCanvas, \r\n    GameWindow,\r\n    GameMath,\r\n    FrameComponent,\r\n    FramePanel,\r\n    FrameText,\r\n    Camera\r\n};"],"names":[],"version":3,"file":"GamaSource.d.ts.map"}