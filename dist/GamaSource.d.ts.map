{"mappings":"AAUA,+BAA8B;ACV9B;IAEI,MAAM,CAAC,EAAC,MAAM,CAAA;CAEjB;ACJD;IAEW,CAAC,EAAC,MAAM,CAAA;IACR,CAAC,EAAC,MAAM,CAAA;gBAEH,CAAC,EAAC,MAAM,EAAE,CAAC,EAAC,MAAM;IAOvB,GAAG,CAAC,CAAC,EAAC,MAAM,EAAE,CAAC,EAAC,MAAM;IAOtB,GAAG,CAAC,KAAK,EAAE,OAAO,GAAG,OAAO;IAM5B,QAAQ,CAAC,KAAK,EAAE,OAAO,GAAG,OAAO;IAMjC,QAAQ,CAAC,MAAM,EAAE,MAAM,GAAG,OAAO;IAMjC,SAAS,IAAI,MAAM;IAMnB,SAAS,IAAI,OAAO;CAU9B;AClDD,OAAe,QAAQ;IAEZ,SAAS,EAAE,OAAO,GAAG,UAAU,CAAmB;IAClD,KAAK,SAAK;IACV,MAAM,SAAK;aAEF,MAAM,IAAG,IAAI;CAEhC;ACPD;IAEW,SAAS,EAAC,OAAO,CAAoB;IAC5C,SAAS,CAAC,MAAM,EAAE,MAAM,GAAG,IAAI,CAAO;IAC/B,GAAG,EAAC,MAAM,CAAgB;WAEnB,MAAM,CAAC,GAAG,EAAE,iBAAiB;IAMpC,KAAK;IAEL,MAAM;IAEN,MAAM;CAUhB;AC9BD,OAAe,QAAQ;WAKL,UAAU;WAiBV,UAAU,CAAC,GAAG,EAAC,MAAM;CAMtC;ACtBD,8BAA6B;ACJ7B;IAEW,SAAS,EAAC,MAAM,CAAA;IAChB,GAAG,EAAC,MAAM,CAAA;gBAML,MAAM,EAAC,MAAM;IAUlB,WAAW,CAAC,WAAW,EAAC,MAAM;IAW9B,eAAe;IAMf,SAAS,CAAC,MAAM,EAAC,MAAM;IAMvB,YAAY,CAAC,WAAW,CAAC,EAAC,MAAM;IAYhC,gBAAgB;CAM1B;AC5DD,wBAwBC;AC1BD;IAEW,MAAM,EAAC,MAAM,CAAA;IACb,KAAK,EAAC,MAAM,CAAA;;IAWZ,IAAI;+BAEe,MAAM;gCACL,MAAM;MAEhC;IAEM,QAAQ,CAAC,EAAE,EAAC,MAAM,IAAI;IAmBtB,QAAQ;CAMlB;AC1CD,OAAe,QAAQ,kBAAmB,SAAQ,MAAM;IAE7C,KAAK,EAAC,MAAM,CAAA;gBAEP,SAAS,EAAC,OAAO,GAAG,UAAU,EAAE,KAAK,EAAC,MAAM,EAAE,MAAM,EAAC,MAAM,EAAE,KAAK,EAAC,MAAM;CASxF;ACZD,yBAAkC,SAAQ,WAAW;gBAErC,SAAS,EAAC,OAAO,GAAG,UAAU,EAAE,KAAK,EAAC,MAAM,EAAE,MAAM,EAAC,MAAM,EAAE,KAAK,EAAC,MAAM;IAM9E,MAAM;CAehB;ACfD;IAEI,OAAc,WAAW,eAA0B;IACnD,OAAc,GAAG,EAAC,wBAAwB,CAAA;IAC1C,OAAc,MAAM,EAAC,UAAU,CAAA;IAOxB,IAAI,aAAW;gBAEV,MAAM,CAAC,EAAC,gBAAgB;IA0E7B,GAAG;WAYI,IAAI;WAMJ,MAAM;WAMN,IAAI;WAKJ,MAAM;CAMvB;AAED,0BAAyB","sources":["src/src/define/GamaSourceState.ts","src/src/define/GamaSourceConfig.ts","src/src/math/vector/Vector2.ts","src/src/rendering/Sprite.ts","src/src/gameObject/GameObject.ts","src/src/input/KeyBoard.ts","src/src/define/GamaSourceTime.ts","src/src/math/TimeController.ts","src/src/UI/view/GameCanvas.ts","src/src/UI/view/GameWindow.ts","src/src/rendering/material/ShapeSprite.ts","src/src/rendering/material/forms/SquareSprite.ts","src/src/GamaSource.ts","src/GamaSource.ts"],"sourcesContent":[null,null,null,null,null,null,null,null,null,null,null,null,null,"import GamaSourceState from \"./define/GamaSourceState\"\r\nimport GamaSourceConfig from \"./define/GamaSourceConfig\"\r\nimport GameObject from \"./gameObject/GameObject\"\r\nimport KeyBoard from \"./input/KeyBoard\"\r\nimport TimeController from \"./math/TimeController\"\r\nimport GameCanvas from \"./UI/view/GameCanvas\"\r\nimport GameWindow from \"./UI/view/GameWindow\"\r\nimport GamaSourceTime from \"./define/GamaSourceTime\"\r\nimport Vector2 from \"./math/vector/Vector2\"\r\nimport Sprite from \"./rendering/Sprite\"\r\nimport ShapeSprite from \"./rendering/material/ShapeSprite\"\r\nimport SquareSprite from \"./rendering/material/forms/SquareSprite\"\r\n\r\nclass GamaSource {\r\n\r\n    public static GameObjects = new Array<GameObject>()\r\n    public static ctx:CanvasRenderingContext2D\r\n    public static window:GameWindow\r\n\r\n    private static canvas:HTMLCanvasElement\r\n\r\n    private static state:GamaSourceState\r\n    private time:TimeController\r\n\r\n    public main = () => {}\r\n\r\n    constructor(config?:GamaSourceConfig) {\r\n\r\n        GamaSource.window = new GameWindow()\r\n\r\n        GameCanvas()\r\n        KeyBoard.initialize()\r\n\r\n        this.time = new TimeController(config?.maxFPS ?? 60)\r\n\r\n        GamaSource.state = GamaSourceState.CLOSED\r\n\r\n        GamaSource.canvas = document.querySelector<HTMLCanvasElement>(\"#game\") as HTMLCanvasElement\r\n\r\n        GamaSource.ctx = GamaSource.canvas.getContext(\"2d\") as CanvasRenderingContext2D\r\n\r\n    }\r\n\r\n    private start() {\r\n\r\n         this.main()\r\n\r\n        GamaSource.GameObjects.forEach((g) => g.start())\r\n\r\n    }\r\n\r\n    private update() {\r\n\r\n        GamaSource.GameObjects.forEach((g) => g.update())\r\n\r\n    }\r\n\r\n    private render() {\r\n        \r\n\r\n        GamaSource.ctx.clearRect(0, 0, GamaSource.window.WIDTH, GamaSource.window.HEIGHT)\r\n\r\n        GamaSource.GameObjects.forEach((g) => g.render())\r\n\r\n    }\r\n\r\n    private loop(currentTime:number) {\r\n\r\n        try {\r\n         \r\n            if (GamaSource.state != GamaSourceState.CLOSED && GamaSource.state != GamaSourceState.CRASHED) {\r\n\r\n                requestAnimationFrame((currentTime) => this.loop(currentTime))\r\n\r\n                this.time.DeltaTime = this.time.getDeltaTime(currentTime)\r\n\r\n                if (this.time.DeltaTime >= this.time.getFrameInterval()) return;\r\n         \r\n                if (GamaSource.state != GamaSourceState.STOPPED) {\r\n\r\n                    this.update()\r\n\r\n                }\r\n\r\n                this.render()\r\n\r\n                this.time.updateFrame(currentTime)\r\n    \r\n            }\r\n\r\n        } catch (err) {\r\n            \r\n            console.error(err);\r\n\r\n            GamaSource.state = GamaSourceState.CRASHED\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public run() {\r\n\r\n         this.start()\r\n\r\n        GamaSource.state = GamaSourceState.RUNNING;\r\n\r\n        this.time.updateLastFrame()\r\n\r\n        requestAnimationFrame((currentTime) => this.loop(currentTime))\r\n\r\n    }\r\n\r\n    public static stop() {\r\n\r\n        GamaSource.state = GamaSourceState.STOPPED\r\n\r\n    }\r\n\r\n    public static resume() {\r\n\r\n        GamaSource.state = GamaSourceState.RUNNING\r\n\r\n    }\r\n\r\n    public static exit() {\r\n\r\n        GamaSource.state = GamaSourceState.CLOSED\r\n\r\n    }\r\n    public static falied() {\r\n\r\n        GamaSource.state = GamaSourceState.CRASHED\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default GamaSource\r\n\r\n// exportações para biblioteca\r\nexport {    \r\n    GamaSource, \r\n    GamaSourceState, \r\n    GamaSourceTime, \r\n    GamaSourceConfig,\r\n    GameObject, \r\n    KeyBoard,\r\n    Vector2,\r\n    TimeController,\r\n    Sprite,\r\n    ShapeSprite, \r\n    SquareSprite, \r\n    GameCanvas, \r\n    GameWindow \r\n};"],"names":[],"version":3,"file":"GamaSource.d.ts.map"}